<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Productos</title>
    <style>
        @media (max-width: 768px) {
            .product-details-card {
                padding: 10px;
            }

            .product-info h1 {
                font-size: 1.5rem;
            }

            .addButton {
                flex-direction: column;
            }
        }

        body {
            font-family: 'Arial', sans-serif;
            line-height: 1.6;
            background-color: #E7E2D1;
            padding: 20px;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        h1 {
            color: #5B1F0F;
            /* Color del título */
            text-align: center;
        }

        .container {
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            justify-content: space-between;
            margin-top: 2%;
        }

        .card {
            background-color: #C2B7A0;
            /* Color de fondo de la tarjeta */
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border: none;
            width: 100%;
            max-width: 300px;
            padding: 10px;
            text-align: center;
            transition: transform 0.3s ease;
            flex: 1 1 250px;
        }

        .card a {
            text-decoration: none;
            /* Elimina el subrayado de los enlaces */
            color: inherit;
            /* Hereda el color del elemento padre */
            text-decoration-style: solid;

        }

        .card:hover {
            transform: translateY(-5px);
            background-color: #934C1A;
            /* Color de fondo al pasar el mouse */
        }

        .card img {
            max-width: 100%;
            border-radius: 8px;
            margin-bottom: 15px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .card h2 {
            color: #0f0e0e;
            /* Color del título de la tarjeta */
            font-size: clamp(1rem, 1.5vw, 1.5rem);
            margin-bottom: 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            text-decoration: none;
        }

        .card p {
            color: #E7E2D1;
            /* Color de la descripción */
            line-height: 1.4;
            text-decoration: none;
        }

        .quantityWrapper {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
        }

        .quantityButton {
            background-color: #8B5B29;
            /* Color de fondo de los botones de cantidad */
            color: #E7E2D1;
            /* Color del texto de los botones de cantidad */
            border: none;
            padding: 5px 10px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s ease;
            border-color: #8B5B29;
        }

        .quantityButton:hover {
            background-color: #934C1A;
            /* Color de fondo al pasar el mouse */
        }

        .quantityInput {
            width: 25px;
            text-align: center;
            -moz-appearance: textfield;
            background-color: #E7E2D1;
            border-color: #8B5B29;
        }

        .quantityInput::-webkit-outer-spin-button,
        .quantityInput::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        .addToCartButton {
            background-color: #8B5B29;
            /* Color de fondo del botón añadir al carrito */
            color: #fff;
            /* Color del texto del botón añadir al carrito */
            border: none;
            padding: 8px 16px;
            cursor: pointer;
            border-radius: 4px;
            transition: background-color 0.3s ease;
            margin-top: 10px;
        }

        .addToCartButton:hover {
            background-color: #934C1A;
            /* Color de fondo al pasar el mouse */
        }

        .carousel-item img {
            width: 100%;
            height: auto;
            object-fit: cover;
        }

        .carousel-container {
            width: auto;
            overflow: hidden;
            border-radius: 16px;
            margin-bottom: 20px;
        }

        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 20px;
        }

        .pagination a {
            color: #C8B400;
            /* Color de los enlaces de paginación */
            padding: 8px 16px;
            text-decoration: none;
            border: 1px solid #ccc;
            margin: 0 5px;
            margin-top: 1%;
            border-radius: 4px;
            transition: background-color 0.3s ease, color 0.3s ease;
        }

        .pagination a:hover {
            background-color: #5B1F0F;
            /* Color de fondo al pasar el mouse */
            color: #fff;
            /* Color del texto al pasar el mouse */
        }

        #toggleFilterButton {
            background-color: #000000;
            /* Color del botón de filtros */
            color: #fff;
            padding: 10px 20px;
            border-radius: 15px;
            border: none;
            cursor: pointer;
            margin-bottom: 10px;
            transition: background-color 0.3s ease, transform 0.3s ease;
            height: min-content;
        }

        #toggleFilterButton:hover {
            background-color: #934C1A;
            /* Color de fondo al pasar el mouse */
            transform: translateY(-2px);
        }

        #filterMenu {
            background-color: #fff;
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            max-height: 0;
            overflow: hidden;
            opacity: 0;
            transform: translateY(-10px);
            transition: max-height 0.5s ease, opacity 0.5s ease, transform 0.5s ease;
        }

        #filterMenu.show {
            max-height: 500px;
            opacity: 1;
            transform: translateY(0);
        }

        /* Botones activos */
        .filter-buttons button.active {
            background-color: #5B1F0F;
            /* Color del botón activo */
            color: #fff;
            transform: scale(1.05);
        }

        .filter-buttons button {
            background-color: #f0f0f0;
            /* Color de fondo de los botones de filtro */
            color: #333;
            border: none;
            padding: 8px 12px;
            margin: 5px;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.3s ease;
        }

        .filter-buttons button:hover {
            background-color: #e8e8e8;
            /* Color de fondo al pasar el mouse */
            transform: translateY(-2px);
        }
    </style>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script>
        function updateQuantity(id, change) {
            const input = document.getElementById(`quantityInput-${id}`);
            let currentValue = parseInt(input.value);

            if (!isNaN(currentValue)) {
                currentValue += change;
                if (currentValue >= 1 && currentValue <= parseInt(input.max)) {
                    input.value = currentValue;
                }
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.quantityButton').forEach(button => {
                button.addEventListener('click', () => {
                    const id = button.getAttribute('data-id');
                    const change = parseInt(button.getAttribute('data-change'));
                    updateQuantity(id, change);
                });
            });

            const cartId = '{{user.cart}}';
            document.querySelectorAll('.addToCartButton').forEach(button => {
                button.addEventListener('click', async () => {
                    const productId = button.getAttribute('data-productid');
                    const quantity = document.getElementById(`quantityInput-${productId}`).value;

                    if (cartId !== "") {
                        try {
                            const response = await fetch(`/api/carts/${cartId}/${productId}`, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ quantity })
                            });


                            if (response.ok) {
                                Swal.fire('', 'Producto agregado al carrito', 'success');
                                updateCartCount();
                            } else {
                                Swal.fire('¡Error!', 'Error al agregar el producto', 'error');
                            }
                        } catch (error) {
                            console.error('Error al agregar el producto', error);
                            Swal.fire('Error interno', 'Error interno del servidor', 'error');
                        }
                    }
                    else {
                        Swal.fire({
                            title: 'No puedes comprar',
                            text: 'Debes estar logueado para realizar compras.',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonText: 'Loguear',
                            cancelButtonText: 'Registrarse',
                            footer: '<a href="/">Volver al shop</a>'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '/login'; // Redirige a la página de inicio de sesión
                            } else if (result.isDismissed) {
                                window.location.href = '/signup'; // Redirige a la página de registro
                            }
                        });
                    }
                });
            });

            async function updateCartCount() {
                try {
                    const response = await fetch(`/api/carts/${cartId}/count`, {
                        method: 'GET',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                    });
                    if (response.ok) {
                        const cart = await response.json();
                        const cartCount = cart.cart.products.reduce((total, product) => total + product.quantity, 0);
                        const cartCountGreaterThanZero = cartCount > 0;
                        document.getElementById('cart-count').innerText = cartCount;
                        document.getElementById('cart-count').style.display = cartCountGreaterThanZero ? 'inline-block' : 'none';
                    }
                } catch (error) {
                    console.error('Error al obtener el conteo del carrito', error);
                }
            }

            if (cartId != '') {
                document.getElementById('goToCartButton').addEventListener('click', () => {
                    const cartId = '{{user.cart}}';
                    window.location.href = `/api/carts/${cartId}`;
                });

                updateCartCount();
            }

            let filterMenuOpen = false;
            const toggleFilterButton = document.getElementById('toggleFilterButton');
            const categoryButtons = document.querySelectorAll('#categoryButtons button');
            const sortButtons = document.querySelectorAll('#sortButtons button');

            toggleFilterButton.addEventListener('click', () => {
                filterMenuOpen = !filterMenuOpen;
                if (filterMenuOpen) {
                    filterMenu.classList.add('show');
                    toggleFilterButton.textContent = 'Ocultar Filtros';
                    filterMenu.style.display = 'block';
                } else {
                    filterMenu.classList.remove('show');
                    toggleFilterButton.textContent = 'Mostrar Filtros';
                    setTimeout(() => {
                        filterMenu.style.display = 'none';
                    }, 500);
                }
            });

            function updateFilters(selectedCategories, selectedSort) {
                let queryParams = new URLSearchParams(window.location.search);
                queryParams.delete('category');
                selectedCategories.forEach(category => {
                    queryParams.append('category', category);
                });
                if (selectedSort) {
                    queryParams.set('sort', selectedSort);
                } else {
                    queryParams.delete('sort');
                }
                window.history.replaceState({}, '', '?' + queryParams.toString());
                window.location.reload();
            }

            const urlParams = new URLSearchParams(window.location.search);
            const selectedCategories = new Set(urlParams.getAll('category'));
            const currentSort = urlParams.get('sort') || '';

            function updateActiveButtons() {
                categoryButtons.forEach(button => {
                    const category = button.getAttribute('data-category');
                    if (selectedCategories.has(category)) {
                        button.classList.add('active');
                    } else {
                        button.classList.remove('active');
                    }
                });

                sortButtons.forEach(button => {
                    if (button.getAttribute('data-sort') === currentSort) {
                        button.classList.add('active');
                    } else {
                        button.classList.remove('active');
                    }
                });
            }

            updateActiveButtons();

            categoryButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const category = button.getAttribute('data-category');
                    if (category === "") {
                        selectedCategories.clear();
                        selectedCategories.add(category);
                    } else {
                        selectedCategories.delete("");
                        if (selectedCategories.has(category)) {
                            selectedCategories.delete(category);
                        } else {
                            selectedCategories.add(category);
                        }
                    }

                    updateFilters([...selectedCategories], currentSort);
                });
            });
        });

    </script>
</head>

<body>
    <div id="productCarousel" class="carousel slide carousel-container">
        <div class="carousel-inner">
            <div class="carousel-item active">
                <img src="/public/assets/banner1.jpg" class="d-block w-100" alt="Imagen 1">
            </div>
            <div class="carousel-item">
                <img src="/public/assets/banner2.jpg" class="d-block w-100" alt="Imagen 2">
            </div>
            <div class="carousel-item">
                <img src="/public/assets/banner3.jpg" class="d-block w-100" alt="Imagen 3">
            </div>
            <div class="carousel-item">
                <img src="/public/assets/banner4.jpg" class="d-block w-100" alt="Imagen 4">
            </div>
        </div>
        <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Anterior</span>
        </button>
        <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="visually-hidden">Siguiente</span>
        </button>
    </div>

    <button id="toggleFilterButton">Mostrar Filtros</button>

    <div id="filterMenu" class="filter-menu" style="display: none;">
        <div class="filter-group">
            <h5>Categorías</h5>
            <div class="filter-buttons" id="categoryButtons">
                <button data-category="">Todas</button>
                <button data-category="armas">Armas</button>
                <button data-category="ropa">Ropa</button>
                <button data-category="accesorios">Accesorios</button>
                <button data-category="decoración">Decoración</button>
                <button data-category="comida">Comida</button>
            </div>
        </div>
        <div class="filter-group">
            <h5>Ordenar por Precio</h5>
            <div class="filter-buttons" id="sortButtons">
                <button data-sort="">Sin Orden</button>
                <button data-sort="asc">Menor a Mayor</button>
                <button data-sort="desc">Mayor a Menor</button>
            </div>
        </div>
    </div>

    <div class="container">
        {{#each products}}
        <div class="card">
            <a href="/products/details/{{this._id}}">
                <img src="{{thumbnail}}" alt="Imagen de producto">
                <h2>{{title}}</h2>
                <p>{{description}}</p>
                <h3>$ {{price}}</h3>
            </a>
            <div class="quantityWrapper">
                <button class="quantityButton" data-id="{{_id}}" data-change="-1">-</button>
                <input id="quantityInput-{{_id}}" class="quantityInput" type="number" value="1" min="1" max="99">
                <button class="quantityButton" data-id="{{_id}}" data-change="1">+</button>
            </div>
            <button class="addToCartButton" data-productid="{{_id}}">Añadir al carrito</button>
        </div>
        {{/each}}
    </div>

    <div class="pagination">
        {{#if hasPrevPage}}
        <a href="?page={{prevPage}}">Anterior</a>
        {{/if}}
        {{#if hasNextPage}}
        <a href="?page={{nextPage}}">Siguiente</a>
        {{/if}}
    </div>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.min.js"></script>

</body>

</html>