<style>
  /* Estilos generales */
  * {
    box-sizing: border-box;
  }

  body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
  }

  .profile-container {
    max-width: 900px;
    margin: 50px auto;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.1);
    background-color: #fff;
  }

  .profile-title {
    text-align: center;
    font-size: 2.5rem;
    margin-bottom: 40px;
    color: #333;
    letter-spacing: 1px;
  }

  .profile-item {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    padding-bottom: 10px;
    border-bottom: 1px solid #eaeaea;
  }

  .profile-item label {
    font-size: 1.3rem;
    color: #333;
    flex: 1 1 30%;
  }

  .profile-item input {
    border: none;
    border-bottom: 1px solid #ddd;
    font-size: 1.2rem;
    width: 100%;
    max-width: 350px;
    padding: 5px;
    margin-right: 10px;
    background-color: #f9f9f9;
    transition: background-color 0.3s ease;
  }

  .profile-item input:disabled {
    background-color: #f1f1f1;
  }

  .profile-item input:focus {
    background-color: #fff;
    outline: none;
    border-bottom: 2px solid #007bff;
  }

  .profile-item button {
    padding: 8px 12px;
    background-color: #007bff;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
  }

  .profile-item button:disabled {
    background-color: #ccc;
    cursor: not-allowed;
  }

  .profile-item button:hover {
    background-color: #0056b3;
  }

  .save-button {
    display: none;
    margin-left: 10px;
  }
</style>

<script>
  function enableInput(fieldId) {
    const input = document.getElementById(fieldId);
    const saveButton = document.getElementById(`save-${fieldId}`);

    input.disabled = false;
    input.focus();
    saveButton.style.display = 'inline-block'; // Mostrar botón "Guardar"
  }

  function updateProfile(field, userId) {
    const value = document.getElementById(field).value;

    fetch(`/api/sessions/update/${userId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ [field]: value }),
    })
      .then((response) => {
        if (response.ok) {
          alert(`${field.charAt(0).toUpperCase() + field.slice(1)} actualizado con éxito.`);
          location.reload(); // Recargar para deshabilitar el input
        } else {
          alert(`Error al actualizar ${field}.`);
        }
      })
      .catch((error) => console.error('Error:', error));
  }

  async function resetPassword(userId) {
    const { value: result } = await Swal.fire({
      text: "¡Se enviará un email para resetear la contraseña!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, enviar!',
      cancelButtonText: 'Cancelar'
    });

    if (result) {
      const response = await fetch(`/api/sessions/password-reset-request`, {
        method: 'POST',
      });

      if (response.ok) {
        Swal.fire('Email enviado!', '', 'success');
      } else {
        const error = await response.json();
        Swal.fire('Error', error.message, 'error');
      }
    }
  }



  async function updateCartCount() {
    console.log('Ejecutando updateCartCount');
    const cartId = '{{user.cart}}';
    console.log('Cart ID:', cartId);
    try {
      const response = await fetch(`/api/carts/${cartId}/count`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json'
        },
      });
      if (response.ok) {
        const cart = await response.json();
        const cartCount = cart.cart.products.reduce((total, product) => total + product.quantity, 0);
        const cartCountGreaterThanZero = cartCount > 0;
        document.getElementById('cart-count').innerText = cartCount;
        document.getElementById('cart-count').style.display = cartCountGreaterThanZero ? 'inline-block' : 'none';
      }
    } catch (error) {
      console.error('Error al obtener el conteo del carrito', error);
    }
  }
  updateCartCount();
</script>

<div class="profile-container">
  <h2 class="profile-title">Mi Perfil</h2>

  <!-- Campo para el nombre -->
  <div class="profile-item">
    <label for="first_name">Nombre:</label>
    <input type="text" id="first_name" value="{{user.first_name}}" disabled />
    <button onclick="enableInput('first_name')">Editar</button>
    <button id="save-first_name" class="save-button"
      onclick="updateProfile('first_name', '{{user._id}}')">Guardar</button>
  </div>

  <!-- Campo para el apellido -->
  <div class="profile-item">
    <label for="last_name">Apellido:</label>
    <input type="text" id="last_name" value="{{user.last_name}}" disabled />
    <button onclick="enableInput('last_name')">Editar</button>
    <button id="save-last_name" class="save-button"
      onclick="updateProfile('last_name', '{{user._id}}')">Guardar</button>
  </div>

  <!-- Campo para la edad -->
  <div class="profile-item">
    <label for="age">Edad:</label>
    <input type="number" id="age" value="{{user.age}}" disabled />
    <button onclick="enableInput('age')">Editar</button>
    <button id="save-age" class="save-button" onclick="updateProfile('age', '{{user._id}}')">Guardar</button>
  </div>

  <!-- Campo para el correo electrónico (no editable) -->
  <div class="profile-item">
    <label for="email">Correo Electrónico:</label>
    <input type="email" id="email" value="{{user.email}}" disabled />
  </div>

  <!-- Botón para restablecer la contraseña -->
  <div class="profile-item password">
    <label>Contraseña:</label>
    <button onclick="resetPassword('{{user._id}}')">Restablecer contraseña</button>
  </div>
</div>